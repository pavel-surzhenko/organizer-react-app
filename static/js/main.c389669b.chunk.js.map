{"version":3,"sources":["lib/redux/types/auth.ts","lib/redux/types/task.ts","lib/redux/types/tag.ts","lib/redux/actions/auth.ts","api/config.ts","api/api.ts","lib/redux/actions/task.ts","lib/redux/actions/tag.ts","lib/redux/selectors/auth.ts","lib/redux/selectors/task.ts","lib/redux/selectors/tag.ts","components/Tag/index.tsx","components/Navigation/index.tsx","components/Login/config.ts","components/Login/index.tsx","hooks/useLogin.ts","components/SignUp/config.ts","components/SignUp/index.tsx","components/Task/index.tsx","constants/toastOptions.ts","components/TaskCard/config.ts","components/TaskCard/index.tsx","components/Tasks/index.tsx","hooks/useToken.ts","pages/LoginPage.tsx","pages/SignUpPage.tsx","pages/TasksPage.tsx","app.tsx","hooks/useErrorMessage.ts","lib/redux/reducers/auth.ts","lib/redux/reducers/task.ts","lib/redux/reducers/tag.ts","lib/redux/init/rootReducer.ts","lib/redux/init/middleware.ts","lib/redux/init/store.ts","index.tsx"],"names":["authTypes","Object","freeze","SET_TOKEN","SET_ERROR","RESET_ERROR","taskTypes","FETCH_TASKS","START_FETCHING","STOP_FETCHING","SET_SELECTED_TASK","tagTypes","SET_SELECTED_TAG_ID","authActions","resetError","type","setError","message","error","payload","setToken","token","ROOT_URL","process","TASKS_URL","AUTH_URL","TAGS_URL","api","localStorage","getItem","auth","async","userInfo","data","axios","post","headers","response","credentials","get","Authorization","tasks","task","taskId","delete","id","put","tags","taskActions","setTaskId","startFetching","stopFetching","fetchTask","fetchTaskAsync","dispatch","getTasks","tagsActions","fetchTags","fetchTagsAsync","getTags","setTagId","tagId","getErrorMessage","state","errorMessage","getSelectedTask","tag","getTagId","Tag","props","useDispatch","selectedTag","useSelector","onClick","className","style","color","backgroundColor","bg","name","Navigation","isTaskManagerPage","useLocation","pathname","navigate","useNavigate","to","logout","removeItem","toast","schema","yup","shape","email","required","password","min","LoginForm","form","useForm","mode","resolver","yupResolver","onSubmit","handleSubmit","login","window","btoa","useLogin","setItem","placeholder","register","errors","formState","render","value","disabled","isValid","confirmPassword","oneOf","SignUpForm","newUser","formData","signup","shouldUnregister","Task","title","deadline","completed","date","format","Date","toastOptionsError","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","toastOptions","description","TaskCardForm","selectedTagId","isNew","useEffect","setFocus","tagsJSX","map","selectedDate","setSelectedDate","useState","reset","taskData","toJSON","create","update","success","watch","info","defaultValue","control","field","minDate","selected","onChange","dateFormat","Tasks","selectedTaskId","selectedTask","find","taskJSX","length","useToken","LoginPage","SignUpPage","TasksPage","App","useErrorMessage","newestOnTop","transition","Slide","path","element","replace","initialState","isFetching","rootReducer","combineReducers","action","createLogger","duration","collapsed","colors","prevState","nextState","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composeEnhancers","compose","middleware","thunk","store","createStore","applyMiddleware","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.c389669b.chunk.js","sourcesContent":["export const authTypes = Object.freeze({\r\n    SET_TOKEN: 'SET_TOKEN',\r\n    SET_ERROR: 'SET_ERROR',\r\n    RESET_ERROR: 'RESET_ERROR',\r\n});\r\n","export const taskTypes = Object.freeze({\r\n    FETCH_TASKS: 'FETCH_TASKS',\r\n    START_FETCHING: 'START_FETCHING',\r\n    STOP_FETCHING: 'STOP_FETCHING',\r\n    SET_SELECTED_TASK: 'SET_SELECTED_TASK',\r\n})","export const tagTypes = Object.freeze({\r\n    FETCH_TASKS: 'FETCH_TAGS',\r\n    START_FETCHING: 'START_FETCHING',\r\n    STOP_FETCHING: 'STOP_FETCHING',\r\n    SET_SELECTED_TAG_ID: 'SET_SELECTED_TAG_ID'\r\n})","import { authTypes } from '../types';\r\n\r\nexport const authActions = Object.freeze({\r\n    resetError: () => {\r\n        return {\r\n            type: authTypes.RESET_ERROR,\r\n        };\r\n    },\r\n\r\n    setError: (message: string) => {\r\n        return {\r\n            type: authTypes.SET_ERROR,\r\n            error: true,\r\n            payload: message,\r\n        };\r\n    },\r\n\r\n    setToken: (token: string) => {\r\n        return {\r\n            type: authTypes.SET_TOKEN,\r\n            payload: token,\r\n        };\r\n    },\r\n});\r\n","// Config\r\nconst ROOT_URL = process.env.REACT_APP_API_URL;;\r\n\r\nexport const TASKS_URL = `${ROOT_URL}/rtx/api/v2/todos/tasks`;\r\nexport const AUTH_URL = `${ROOT_URL}/rtx/api/v2/todos/auth`;\r\nexport const TAGS_URL = `${ROOT_URL}/rtx/api/v2/todos/tags`;\r\n\r\n\r\n","// Core\nimport axios, { AxiosResponse } from 'axios';\nimport { ILoginFormShape } from '../components/Login/config';\nimport { ISignUp } from '../components/SignUp/config';\nimport { TASKS_URL, AUTH_URL, TAGS_URL } from './config';\nimport { IErrorMessage, ITag, ITask, ITaskCreated, IToken } from './types';\n\n\nexport const api = Object.freeze({\n    get token() {\n        return localStorage.getItem('token');\n    },\n\n    auth: {\n        async signup(userInfo: ISignUp): Promise<IToken | IErrorMessage> {\n            try {\n                const { data } = await axios.post<ISignUp, AxiosResponse<IToken>>(\n                    `${AUTH_URL}/registration`,\n                    userInfo,\n                    {\n                        headers: {\n                            'Content-type': 'application/json',\n                        },\n                    });\n\n                return data;\n            } catch (error: any) {\n                return error.response.data || { message: 'Unknown error occurred' }\n            }\n\n        },\n\n        async login(credentials: string): Promise<IToken | IErrorMessage> {\n            try {\n                const { data } = await axios.get<ILoginFormShape, AxiosResponse<IToken>>(\n                    `${AUTH_URL}/login`,\n                    {\n                        headers: {\n                            Authorization: `Basic ${credentials}`,\n                        },\n                    }\n                )\n\n                return data;\n            } catch (error: any) {\n                return error.response.data || { message: 'Unknown error occurred' }\n            }\n\n        },\n\n        async logout(): Promise<void | IErrorMessage> {\n            try {\n                await axios.get(\n                    `${AUTH_URL}/logout`,\n                    {\n                        headers: {\n                            Authorization: `Bearer ${api.token}`,\n                        },\n                    })\n            } catch (error: any) {\n                return error.response.data || { message: 'Unknown error occurred' }\n            }\n        }\n    },\n\n    tasks: {\n        async getTasks(): Promise<ITask[]> {\n            const { data } = await axios.get<AxiosResponse<ITask[]>>(TASKS_URL, {\n                headers: {\n                    Authorization: `Bearer ${api.token}`\n                }\n            })\n\n            return data?.data\n        },\n\n        async create(task: ITaskCreated): Promise<ITask | IErrorMessage> {\n            try {\n                const { data } = await axios.post<ITaskCreated, AxiosResponse<ITask | IErrorMessage>>(TASKS_URL,\n                    task,\n                    {\n                        headers: {\n                            Authorization: `Bearer ${api.token}`,\n                        },\n                    });\n\n                return data\n            } catch (error: any) {\n                return error.response.data || { message: 'Unknown error occurred' }\n            }\n\n        },\n        async delete(taskId?: string): Promise<void | IErrorMessage> {\n            try {\n                await axios.delete<void>(`${TASKS_URL}/${taskId}`, {\n                    headers: {\n                        Authorization: `Bearer ${api.token}`\n                    }\n                })\n            } catch (error: any) {\n                return error.response.data || { message: 'Unknown error occurred' }\n            }\n\n        },\n\n        async update(task: ITaskCreated, id?: string): Promise<ITask | IErrorMessage> {\n            try {\n                const { data } = await axios.put<ITaskCreated, AxiosResponse<ITask | IErrorMessage>>(`${TASKS_URL}/${id}`,\n                    task,\n                    {\n                        headers: {\n                            Authorization: `Bearer ${api.token}`,\n                        },\n                    });\n\n                return data\n            } catch (error: any) {\n                return error.response.data || { message: 'Unknown error occurred' }\n            }\n\n        },\n    },\n    tags: {\n        async getTags(): Promise<ITag[]> {\n            const { data } = await axios.get<ITag[]>(TAGS_URL)\n\n            return data\n        }\n    }\n});\n","import { api, ITask } from \"../../../api\"\r\nimport { AppThunk } from \"../init/store\"\r\nimport { taskTypes } from \"../types\"\r\nimport { authActions } from \"./auth\"\r\n\r\nexport const taskActions = Object.freeze({\r\n    setTaskId: (taskId: string) => {\r\n        return {\r\n            type: taskTypes.SET_SELECTED_TASK,\r\n            payload: taskId\r\n        }\r\n    },\r\n\r\n    startFetching: () => {\r\n        return {\r\n            type: taskTypes.START_FETCHING,\r\n        }\r\n    },\r\n\r\n    stopFetching: () => {\r\n        return {\r\n            type: taskTypes.STOP_FETCHING,\r\n        }\r\n    },\r\n\r\n    fetchTask: (tasks: ITask[]) => {\r\n        return {\r\n            type: taskTypes.FETCH_TASKS,\r\n            payload: tasks,\r\n        }\r\n    },\r\n\r\n    fetchTaskAsync: (): AppThunk => async (dispatch) => {\r\n        try {\r\n            dispatch(taskActions.startFetching())\r\n            const tasks = await api.tasks.getTasks()\r\n            dispatch(taskActions.fetchTask(tasks))\r\n        } catch (error: any) {\r\n            const { message } = error;\r\n            dispatch(authActions.setError(message))\r\n        } finally {\r\n            dispatch(taskActions.stopFetching());\r\n        }\r\n    }\r\n})","import { api, ITag } from \"../../../api\"\r\nimport { AppThunk } from \"../init/store\"\r\nimport { tagTypes } from \"../types\"\r\nimport { authActions } from \"./auth\"\r\n\r\nexport const tagsActions = Object.freeze({\r\n    startFetching: () => {\r\n        return {\r\n            type: tagTypes.START_FETCHING,\r\n        }\r\n    },\r\n\r\n    stopFetching: () => {\r\n        return {\r\n            type: tagTypes.STOP_FETCHING,\r\n        }\r\n    },\r\n\r\n    fetchTags: (tags: ITag[]) => {\r\n        return {\r\n            type: tagTypes.FETCH_TASKS,\r\n            payload: tags,\r\n        }\r\n    },\r\n\r\n    fetchTagsAsync: (): AppThunk => async (dispatch) => {\r\n        try {\r\n            dispatch(tagsActions.startFetching())\r\n            const tags = await api.tags.getTags()\r\n            dispatch(tagsActions.fetchTags(tags))\r\n        } catch (error: any) {\r\n            const { message } = error;\r\n            dispatch(authActions.setError(message))\r\n        } finally {\r\n            dispatch(tagsActions.stopFetching());\r\n        }\r\n    },\r\n\r\n    setTagId: (tagId: string) => {\r\n        return {\r\n            type: tagTypes.SET_SELECTED_TAG_ID,\r\n            payload: tagId\r\n        }\r\n    },\r\n})","import { RootState } from \"../init/store\";\r\n\r\nexport const getToken = (state: RootState): string => {\r\n    return state.auth.token;\r\n};\r\n\r\nexport const getErrorMessage = (state: RootState): string => {\r\n    return state.auth.errorMessage;\r\n};\r\n","import { ITask } from '../../../api';\r\nimport { RootState } from '../init/store';\r\n\r\nexport const getTasks = (state: RootState): ITask[] => {\r\n    return state.task.tasks\r\n};\r\n\r\nexport const getSelectedTask = (state: RootState): string => {\r\n    return state.task.id\r\n};","import { RootState } from '../init/store';\r\n\r\nexport const getTags = (state: RootState) => {\r\n    return state.tag.tags\r\n};\r\n\r\nexport const getTagId = (state: RootState): string => {\r\n    return state.tag.tagId\r\n};","import { useDispatch, useSelector } from 'react-redux';\r\nimport { ITag } from '../../api';\r\nimport { tagsActions } from '../../lib/redux/actions';\r\nimport { getTagId } from '../../lib/redux/selectors';\r\n\r\nexport const Tag: React.FC<ITag> = (props) => {\r\n    const dispatch = useDispatch();\r\n    const selectedTag = useSelector(getTagId)\r\n\r\n    const handleClick = () => {\r\n        dispatch(tagsActions.setTagId(props.id));\r\n    };\r\n\r\n    return (\r\n        <span\r\n            onClick={handleClick}\r\n            className={`tag ${selectedTag === props.id ? 'selected' : ''}`}\r\n            style={{\r\n                color: `${props?.color}`,\r\n                backgroundColor: `${props?.bg}`,\r\n            }}\r\n        >\r\n            {props.name}\r\n        </span>\r\n    );\r\n};\r\n","import { useDispatch } from 'react-redux';\nimport { Link, NavLink, useLocation, useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { api } from '../../api';\nimport { authActions } from '../../lib/redux/actions';\n\nexport const Navigation: React.FC = () => {\n    const isTaskManagerPage = useLocation().pathname === '/task-manager';\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const logOut = async () => {\n        const error = await api.auth.logout();\n        if (error) {\n            dispatch(authActions.setError(error.message));\n        } else {\n            localStorage.removeItem('token');\n            toast('See you soon');\n            navigate('/login');\n        }\n    };\n\n    return (\n        <nav>\n            {!isTaskManagerPage && <NavLink to='/login'>Log in</NavLink>}\n            <NavLink to='/task-manager'>To tasks</NavLink>\n            {isTaskManagerPage && (\n                <Link to='' onClick={logOut}>\n                    Log out\n                </Link>\n            )}\n        </nav>\n    );\n};\n","import * as yup from 'yup';\r\n\r\nexport const schema: yup.SchemaOf<ILoginFormShape> = yup.object().shape({\r\n    email: yup.string().email().required(''),\r\n    password: yup.string().min(8).required(''),\r\n});\r\n\r\nexport interface ILoginFormShape {\r\n    email: string;\r\n    password: string;\r\n}","import { ErrorMessage } from '@hookform/error-message';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport { useLogin } from '../../hooks/useLogin';\r\nimport { authActions } from '../../lib/redux/actions';\r\nimport { ILoginFormShape, schema } from './config';\r\n\r\nexport const LoginForm: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const form = useForm<ILoginFormShape>({\r\n        mode: 'all',\r\n        resolver: yupResolver(schema),\r\n    });\r\n\r\n    const onSubmit = form.handleSubmit(async (data: ILoginFormShape) => {\r\n        const token = await useLogin(data);\r\n\r\n        if ('data' in token) {\r\n            localStorage.setItem('token', token.data);\r\n            dispatch(authActions.setToken(token.data));\r\n            toast('Welcome');\r\n            navigate('/task-manager');\r\n        } else {\r\n            dispatch(authActions.setError(token.message));\r\n        }\r\n    });\r\n\r\n    const isValid = () => !form.formState.isValid;\r\n\r\n    return (\r\n        <section className='sign-form'>\r\n            <form onSubmit={onSubmit}>\r\n                <fieldset>\r\n                    <legend>Log in</legend>\r\n                    <label className='label'>\r\n                        <input\r\n                            placeholder='Email'\r\n                            type='text'\r\n                            {...form.register('email')}\r\n                        />\r\n                        <ErrorMessage\r\n                            errors={form.formState.errors}\r\n                            name='email'\r\n                            render={({ message }) => (\r\n                                <span className='errorMessage'>{message}</span>\r\n                            )}\r\n                        />\r\n                    </label>\r\n                    <label className='label'>\r\n                        <input\r\n                            type='password'\r\n                            placeholder='Password'\r\n                            {...form.register('password')}\r\n                        />\r\n                        <ErrorMessage\r\n                            errors={form.formState.errors}\r\n                            name='password'\r\n                            render={({ message }) => (\r\n                                <span className='errorMessage'>{message}</span>\r\n                            )}\r\n                        />\r\n                    </label>\r\n                    <input\r\n                        type='submit'\r\n                        className='button-login'\r\n                        value='log in'\r\n                        disabled={isValid()}\r\n                    />\r\n                </fieldset>\r\n                <p>\r\n                    {`if you don't have an account, you can.`}\r\n                    <Link to='/signup'> register</Link>\r\n                </p>\r\n            </form>\r\n        </section>\r\n    );\r\n};\r\n","import { api } from \"../api\";\r\nimport { ILoginFormShape } from \"../components/Login/config\";\r\n\r\nexport const useLogin = async (data: ILoginFormShape) => {\r\n    const token = await api.auth.login(\r\n        window.btoa(`${data?.email}:${data?.password}`)\r\n    );\r\n\r\n    return token;\r\n};","import * as yup from 'yup';\r\n\r\nexport const schema: yup.SchemaOf<ISignUpFormShape> = yup.object().shape({\r\n    name: yup.string().min(3).required(''),\r\n    email: yup.string().email().required(''),\r\n    password: yup.string().min(8).required(''),\r\n    confirmPassword: yup.string().oneOf([yup.ref('password')]).required('passwords do not match'),\r\n});\r\n\r\nexport interface ISignUp extends Omit<ISignUpFormShape, 'confirmPassword'>{}\r\n\r\nexport interface ISignUpFormShape {\r\n    name: string;\r\n    email: string;\r\n    password: string;\r\n    confirmPassword: string;\r\n}","import { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ErrorMessage } from '@hookform/error-message';\r\nimport { ISignUpFormShape, schema } from './config';\r\nimport { api } from '../../api';\r\nimport { authActions } from '../../lib/redux/actions';\r\n\r\nexport const SignUpForm: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const form = useForm<ISignUpFormShape>({\r\n        mode: 'onTouched',\r\n        resolver: yupResolver(schema),\r\n    });\r\n\r\n    const onSubmit = form.handleSubmit(async (formData: ISignUpFormShape) => {\r\n        const { confirmPassword, ...newUser } = formData;\r\n        const token = await api.auth.signup(newUser);\r\n\r\n        if ('data' in token) {\r\n            dispatch(authActions.setToken(token.data));\r\n            localStorage.setItem('token', token.data);\r\n            navigate('/task-manager');\r\n        } else {\r\n            dispatch(authActions.setError(token.message));\r\n        }\r\n    });\r\n\r\n    return (\r\n        <section className='publish-tip sign-form'>\r\n            <form onSubmit={onSubmit}>\r\n                <fieldset>\r\n                    <legend>Registration</legend>\r\n                    <label className='label'>\r\n                        <input\r\n                            placeholder='Name'\r\n                            type='text'\r\n                            {...form.register('name')}\r\n                        />\r\n                        <ErrorMessage\r\n                            errors={form.formState.errors}\r\n                            name='name'\r\n                            render={({ message }) => (\r\n                                <span className='errorMessage'>{message}</span>\r\n                            )}\r\n                        />\r\n                    </label>\r\n                    <label className='label'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='Email'\r\n                            {...form.register('email')}\r\n                        />\r\n                        <ErrorMessage\r\n                            errors={form.formState.errors}\r\n                            name='email'\r\n                            render={({ message }) => (\r\n                                <span className='errorMessage'>{message}</span>\r\n                            )}\r\n                        />\r\n                    </label>\r\n                    <label className='label'>\r\n                        <input\r\n                            type='Password'\r\n                            placeholder='Password'\r\n                            {...form.register('password')}\r\n                        />\r\n                        <ErrorMessage\r\n                            errors={form.formState.errors}\r\n                            name='password'\r\n                            render={({ message }) => (\r\n                                <span className='errorMessage'>{message}</span>\r\n                            )}\r\n                        />\r\n                    </label>\r\n                    <label className='label'>\r\n                        <input\r\n                            type='password'\r\n                            placeholder='Confirm password'\r\n                            {...form.register('confirmPassword', { shouldUnregister: false })}\r\n                        />\r\n                        <ErrorMessage\r\n                            errors={form.formState.errors}\r\n                            name='confirmPassword'\r\n                            render={() => (\r\n                                <span className='errorMessage'>\r\n                                    {'passwords do not match'}\r\n                                </span>\r\n                            )}\r\n                        />\r\n                    </label>\r\n                    <input\r\n                        type='submit'\r\n                        className='button-login'\r\n                        value='Register'\r\n                    />\r\n                </fieldset>\r\n                <p>\r\n                    to\r\n                    <Link to='/login'> login</Link>\r\n                </p>\r\n            </form>\r\n        </section>\r\n    );\r\n};\r\n","import { format } from 'date-fns';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ITask } from '../../api';\r\nimport { tagsActions, taskActions } from '../../lib/redux/actions';\r\nimport { Tag } from '../Tag';\r\n\r\nexport const Task: React.FC<IPropTypes> = (props) => {\r\n    const dispatch = useDispatch();\r\n    const { title, deadline, tag, completed, id } = props;\r\n    const date = format(new Date(deadline), 'd MMM, yyyy');    \r\n\r\n    const handleClick = () => {\r\n        dispatch(taskActions.setTaskId(id));\r\n        dispatch(tagsActions.setTagId(tag.id))\r\n    };\r\n\r\n    return (\r\n        <div\r\n            onClick={handleClick}\r\n            className={`task ${completed ? 'completed' : ''}`}\r\n        >\r\n            <span className='title'>{title}</span>\r\n            <div className='meta'>\r\n                <span className='deadline'>{date}</span>\r\n                <Tag {...tag} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface IPropTypes extends ITask {}\r\n","import { ToastOptions } from \"react-toastify\";\r\n\r\nexport const toastOptionsError: ToastOptions = Object.freeze({\r\n    position:        'top-right',\r\n    autoClose:       7000,\r\n    hideProgressBar: false,\r\n    closeOnClick:    true,\r\n    pauseOnHover:    true,\r\n    draggable:       true,\r\n    progress:        undefined,\r\n});\r\n\r\nexport const toastOptions: ToastOptions = Object.freeze({\r\n    position:        'top-right',\r\n    autoClose:       2000,\r\n    hideProgressBar: false,\r\n    closeOnClick:    true,\r\n    pauseOnHover:    false,\r\n    draggable:       true,\r\n    progress:        undefined,\r\n});","import * as yup from 'yup';\r\nimport { ITag } from '../../api';\r\n\r\nexport const schema: yup.SchemaOf<INewTask> = yup.object().shape({\r\n    title: yup\r\n        .string()\r\n        .min(3)\r\n        .required(''),\r\n    deadline: yup\r\n        .date(),\r\n    description: yup\r\n        .string()\r\n        .min(3)\r\n        .required('*'),\r\n    tag: yup\r\n        .string(),\r\n});\r\n\r\nexport interface INewTask {\r\n    title: string\r\n    deadline?: Date\r\n    description: string\r\n    tag?: string\r\n}\r\n\r\nexport interface ITaskSeleсted {\r\n    id?: string;\r\n    completed?: boolean;\r\n    title?: string;\r\n    description?: string;\r\n    deadline?: string;\r\n    tag?: ITag;\r\n}","// Core\r\nimport { ErrorMessage } from '@hookform/error-message';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useEffect, useState } from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Config\r\nimport { api, ITag } from '../../api';\r\nimport { toastOptions } from '../../constants/toastOptions';\r\nimport { authActions, tagsActions, taskActions } from '../../lib/redux/actions';\r\nimport { getSelectedTask, getTagId, getTags } from '../../lib/redux/selectors';\r\nimport { Tag } from '../Tag';\r\nimport { INewTask, ITaskSeleсted, schema } from './config';\r\n\r\nexport const TaskCardForm: React.FC<ITaskSeleсted> = (props) => {\r\n    const dispatch = useDispatch();\r\n    const selectedTagId = useSelector(getTagId);\r\n    const isNew = useSelector(getSelectedTask) === 'new';\r\n\r\n    const form = useForm<INewTask>({\r\n        mode: 'onTouched',\r\n        resolver: yupResolver(schema),\r\n    });\r\n\r\n    useEffect(() => {\r\n        dispatch(tagsActions.fetchTagsAsync());\r\n        form.setFocus('title');\r\n    }, []);\r\n\r\n    const tags = useSelector(getTags);\r\n\r\n    const tagsJSX = tags.map((task: ITag) => {\r\n        return <Tag key={task.id} {...task} />;\r\n    });\r\n\r\n    const [selectedDate, setSelectedDate] = useState(\r\n        props?.deadline ? new Date(props.deadline) : new Date()\r\n    );\r\n\r\n    useEffect(() => {\r\n        form.reset();\r\n        setSelectedDate(\r\n            props?.deadline ? new Date(props.deadline) : new Date()\r\n        );\r\n    }, [props]);\r\n\r\n    const onSubmit = form.handleSubmit(async (data) => {\r\n        const taskData = {\r\n            completed: false,\r\n            title: data.title,\r\n            description: data.description,\r\n            deadline: selectedDate.toJSON(),\r\n            tag: selectedTagId,\r\n        };\r\n\r\n        const token = isNew\r\n            ? await api.tasks.create(taskData)\r\n            : await api.tasks.update(taskData, props?.id);\r\n\r\n        if ('data' in token) {\r\n            dispatch(taskActions.setTaskId(''));\r\n            dispatch(taskActions.fetchTaskAsync());\r\n            toast.success(\r\n                `${isNew ? 'Task created' : 'Task updated'}`,\r\n                toastOptions\r\n            );\r\n            form.reset();\r\n        } else if('message' in token) {\r\n            dispatch(authActions.setError(token.message));\r\n        }\r\n    });\r\n\r\n    const resetForm = () => {\r\n        form.reset();\r\n        setSelectedDate(\r\n            props?.deadline ? new Date(props.deadline) : new Date()\r\n        );\r\n    };\r\n\r\n    const removeTask = async () => {\r\n        const token = await api.tasks.delete(props.id);\r\n\r\n        if (token) {\r\n            dispatch(authActions.setError(token.message));\r\n        } else {\r\n            dispatch(taskActions.setTaskId(''));\r\n            dispatch(taskActions.fetchTaskAsync());\r\n            toast.success('Task deleted', toastOptions);\r\n        }\r\n    };\r\n\r\n    const completeTask = async () => {\r\n        const data = {\r\n            completed: true,\r\n            title: form.watch('title'),\r\n            description: form.watch('description'),\r\n            deadline: selectedDate.toJSON(),\r\n            tag: selectedTagId,\r\n        };\r\n\r\n        const token = await api.tasks.update(data, props?.id);\r\n\r\n        if ('data' in token) {\r\n            dispatch(taskActions.setTaskId(''));\r\n            dispatch(taskActions.fetchTaskAsync());\r\n            toast.info('Task completed', toastOptions);\r\n        } else if('message' in token){\r\n            dispatch(authActions.setError(token.message));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='task-card'>\r\n            <form onSubmit={onSubmit}>\r\n                <div className='head'>\r\n                    {isNew ? (\r\n                        ''\r\n                    ) : (\r\n                        <>\r\n                            <button\r\n                                type='button'\r\n                                onClick={completeTask}\r\n                                className='button-complete-task'\r\n                            >\r\n                                to complete\r\n                            </button>\r\n                            <div\r\n                                onClick={removeTask}\r\n                                className='button-remove-task'\r\n                            ></div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n                <div className='content'>\r\n                    <label className='label'>\r\n                        Tasks\r\n                        <input\r\n                            defaultValue={`${isNew ? '' : props.title}`}\r\n                            type='text'\r\n                            className='title'\r\n                            placeholder='Do homeworks'\r\n                            {...form.register('title')}\r\n                        />\r\n                    </label>\r\n                    <div className='deadline'>\r\n                        <span className='label'>Deadline</span>\r\n                        <span className='date'>\r\n                            <div className='react-datepicker-wrapper'>\r\n                                <div className='react-datepicker__input-container'>\r\n                                    <Controller\r\n                                        name='deadline'\r\n                                        control={form.control}\r\n                                        defaultValue={selectedDate}\r\n                                        render={({ field }) => (\r\n                                            <ReactDatePicker\r\n                                                minDate={new Date()}\r\n                                                selected={selectedDate}\r\n                                                onChange={(date: Date) =>\r\n                                                    field.onChange(\r\n                                                        setSelectedDate(date)\r\n                                                    )\r\n                                                }\r\n                                                dateFormat='d MMM, yyyy'\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </span>\r\n                    </div>\r\n                    <div className='description'>\r\n                        <label className='label'>\r\n                            Description\r\n                            <textarea\r\n                                defaultValue={`${\r\n                                    isNew ? '' : props.description\r\n                                }`}\r\n                                className='text'\r\n                                placeholder='Do homework before the weekend'\r\n                                {...form.register('description')}\r\n                            ></textarea>\r\n                        </label>\r\n                    </div>\r\n                    <div className='tags'>{tagsJSX}</div>\r\n                    <div className='errors'>\r\n                        <ErrorMessage\r\n                            errors={form.formState.errors}\r\n                            name='title'\r\n                            render={({ message }) => (\r\n                                <p className='errorMessage'>{message}</p>\r\n                            )}\r\n                        />\r\n                        <ErrorMessage\r\n                            errors={form.formState.errors}\r\n                            name='description'\r\n                            render={({ message }) => (\r\n                                <p className='errorMessage'>{message}</p>\r\n                            )}\r\n                        />\r\n                    </div>\r\n                    <div className='form-controls'>\r\n                        <button\r\n                            className='button-reset-task'\r\n                            type='reset'\r\n                            onClick={resetForm}\r\n                        >\r\n                            Reset\r\n                        </button>\r\n                        <button\r\n                            className='button-save-task'\r\n                            type='submit'\r\n                            disabled={!form.formState.isValid || !selectedTagId}\r\n                        >\r\n                            Save\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ITask } from '../../api';\r\nimport { tagsActions, taskActions } from '../../lib/redux/actions';\r\nimport { getSelectedTask, getTasks } from '../../lib/redux/selectors';\r\nimport { Task } from '../Task';\r\nimport { TaskCardForm } from '../TaskCard';\r\n\r\nexport const Tasks: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClick = () => {\r\n        dispatch(taskActions.setTaskId('new'))\r\n        dispatch(tagsActions.setTagId(''))\r\n    }\r\n\r\n    const tasks = useSelector(getTasks);\r\n    const selectedTaskId = useSelector(getSelectedTask);\r\n    const selectedTask = tasks.find((task) => task.id === selectedTaskId)      \r\n\r\n    useEffect(()=> {\r\n        dispatch(taskActions.fetchTaskAsync())\r\n    }, [])\r\n\r\n    const taskJSX = tasks.map((task: ITask) => {\r\n        return <Task key={task.id} {...task} />\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className='controls'>\r\n                <i className='las'></i>\r\n                <button onClick={handleClick} className='button-create-task'>New Task</button>\r\n            </div>\r\n            <div className='wrap'>\r\n                <div className={tasks.length ? 'list': 'list empty'}>\r\n                    <div className='tasks'>{ taskJSX }</div>\r\n                </div>\r\n                {selectedTaskId === 'new' && <TaskCardForm /> || selectedTaskId && <TaskCardForm {...selectedTask}/>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport const useToken = () => {\r\n    const token = localStorage.getItem('token');\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(()=> {\r\n        if(token) {\r\n            navigate('/task-manager')\r\n        } else {\r\n            navigate('/login')\r\n        }\r\n    }, [])\r\n\r\n};","import { LoginForm } from '../components';\r\nimport { useToken } from '../hooks/useToken';\r\n\r\nexport const LoginPage: React.FC = () => {\r\n    useToken();\r\n\r\n    return <LoginForm />;\r\n};\r\n","import { SignUpForm } from \"../components\";\r\n\r\nexport const SignUpPage: React.FC = () => {\r\n    return (\r\n        <SignUpForm />\r\n    );\r\n};","import { Tasks } from '../components';\r\nimport { useToken } from '../hooks/useToken';\r\n\r\nexport const TasksPage: React.FC = () => {\r\n    useToken();\r\n\r\n    return <Tasks />;\r\n};\r\n","// Core\nimport { FC } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Slide, ToastContainer } from 'react-toastify';\n\n// Components\nimport { Navigation } from './components';\nimport { useErrorMessage } from './hooks/useErrorMessage';\nimport { useToken } from './hooks/useToken';\nimport { LoginPage, SignUpPage, TasksPage } from './pages';\n\nexport const App: FC = () => {\n    useErrorMessage();\n    useToken()\n\n    return (\n        <>\n            <ToastContainer newestOnTop transition={Slide} />\n\n            <Navigation />\n            <main>\n                <Routes>\n                    <Route path='/login' element={<LoginPage />} />\n                    <Route path='/signup' element={<SignUpPage />} />\n                    <Route path='/task-manager' element={<TasksPage />} />\n\n                    <Route\n                        path='*'\n                        element={<Navigate to='/task-manager' replace />}\n                    />\n                </Routes>\n            </main>\n        </>\n    );\n};\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { toastOptionsError } from \"../constants/toastOptions\";\r\nimport { authActions } from \"../lib/redux/actions\";\r\nimport { getErrorMessage } from \"../lib/redux/selectors\";\r\n\r\nexport const useErrorMessage = () => {\r\n    const errorMessage = useSelector(getErrorMessage)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (errorMessage) {            \r\n            toast.error(errorMessage, toastOptionsError)\r\n            dispatch(authActions.resetError())\r\n        }\r\n    }, [errorMessage])\r\n};","import { AnyAction } from 'redux';\r\nimport { authTypes } from '../types';\r\n\r\nconst initialState = {\r\n    token: '',\r\n    errorMessage: '',\r\n    error: false,\r\n};\r\n\r\nexport const authReducer = (state = initialState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case authTypes.SET_TOKEN: {\r\n            return {\r\n                ...state,\r\n                token: action.payload,\r\n                error: false,\r\n                errorMessage: '',\r\n            };\r\n        }\r\n\r\n        case authTypes.RESET_ERROR: {\r\n            return {\r\n                ...state,\r\n                error: false,\r\n                errorMessage: '',\r\n            };\r\n        }\r\n\r\n        case authTypes.SET_ERROR: {\r\n            return {\r\n                ...state,\r\n                error: true,\r\n                errorMessage: action.payload,\r\n            };\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n","import { AnyAction } from \"redux\"\r\nimport { taskTypes } from \"../types\"\r\n\r\nconst initialState = {\r\n    id: '',\r\n    tasks: [],\r\n    isFetching: false,\r\n}\r\n\r\nexport const taskReducer = (state = initialState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case taskTypes.START_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n            }\r\n        }\r\n\r\n        case taskTypes.STOP_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n            }\r\n        }\r\n\r\n        case taskTypes.FETCH_TASKS: {\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                tasks: action?.payload\r\n            }\r\n        }\r\n\r\n        case taskTypes.SET_SELECTED_TASK: {\r\n            return {\r\n                ...state,\r\n                id: action?.payload\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}","import { AnyAction } from \"redux\"\r\nimport { tagTypes } from \"../types\"\r\n\r\nconst initialState = {\r\n    tagId: '',\r\n    tags: [],\r\n    isFetching: false,\r\n}\r\n\r\nexport const tagReducer = (state = initialState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case tagTypes.START_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n            }\r\n        }\r\n\r\n        case tagTypes.STOP_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n            }\r\n        }\r\n\r\n        case tagTypes.FETCH_TASKS: {\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                tags: action?.payload\r\n            }\r\n        }\r\n\r\n        case tagTypes.SET_SELECTED_TAG_ID: {\r\n            return {\r\n                ...state,\r\n                tagId: action?.payload\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}","// Core\nimport { combineReducers } from 'redux';\n\n// Reducers\nimport { authReducer as auth, taskReducer as task, tagReducer as tag } from '../reducers';\n\n\nexport const rootReducer = combineReducers({\n    auth,\n    task,\n    tag,\n});\n","// Core\nimport { AnyAction, compose, Middleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nexport const logger = createLogger({\n    duration:  true,\n    collapsed: true,\n    colors:    {\n        title: (action: AnyAction) => {\n            return action.error ? 'firebrick' : 'deepskyblue';\n        },\n        prevState: () => '#1C5FAF',\n        action:    () => '#149945',\n        nextState: () => '#A47104',\n        error:     () => '#ff0005',\n    },\n});\n\nconst developmentEnvironment = process.env.NODE_ENV === 'development';\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\nconst composeEnhancers = developmentEnvironment && devtools ? devtools : compose;\n\nconst middleware: Middleware[] = [thunk];\n\nif (developmentEnvironment) {\n    middleware.push(logger);\n}\n\nexport { composeEnhancers, middleware };\n","// Core\nimport { createStore, applyMiddleware, AnyAction } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n\n// Instruments\nimport { rootReducer } from './rootReducer';\nimport {\n    composeEnhancers,\n    middleware,\n} from './middleware';\n\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(...middleware)),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, AnyAction>;\n\n","// Core\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\n\n// Components\nimport { App } from './app';\n\n// Instruments\nimport { store } from './lib/redux/init/store';\nimport './theme/styles/index.scss';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nrender(\n    <Provider store = { store }>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root'),\n    () => {\n        // eslint-disable-next-line no-console\n        console.log('%c Приложение успешно запущено ', 'background: #00ff00; color: #000000; padding: 2.5px;');\n    },\n);\n"],"sourceRoot":""}